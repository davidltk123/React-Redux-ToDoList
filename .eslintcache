[{"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\index.js":"1","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\App.js":"2","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\reportWebVitals.js":"3","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\reducers.js":"4","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\actionType.js":"5","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoGenerator.jsx":"6","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\ToDoGeneratorContainer.jsx":"7","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\action.js":"8","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\ToDoGroupContainer.jsx":"9","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoGroup.jsx":"10","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoItem.jsx":"11","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\ToDoItemContainer.jsx":"12","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoList.jsx":"13","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\DoneToDoListContainer.jsx":"14","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\DoneList.jsx":"15","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\NotFound.jsx":"16","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\apis\\todos.js":"17","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\apis\\api.js":"18","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\Navigation.jsx":"19","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\LabelGeneratorContainer.jsx":"20","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\LabelGenerator.jsx":"21","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\LabelManagerContainer.jsx":"22","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\LabelManager.jsx":"23","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\apis\\labels.js":"24","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\LabelItemContainer.jsx":"25","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\LabelItem.jsx":"26"},{"size":804,"mtime":1607501705440,"results":"27","hashOfConfig":"28"},{"size":843,"mtime":1607579572512,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":1320,"mtime":1607579428633,"results":"31","hashOfConfig":"28"},{"size":338,"mtime":1607579265628,"results":"32","hashOfConfig":"28"},{"size":993,"mtime":1607520601004,"results":"33","hashOfConfig":"28"},{"size":369,"mtime":1607616255786,"results":"34","hashOfConfig":"28"},{"size":891,"mtime":1607579298340,"results":"35","hashOfConfig":"28"},{"size":439,"mtime":1607616200189,"results":"36","hashOfConfig":"28"},{"size":1220,"mtime":1607616206157,"results":"37","hashOfConfig":"28"},{"size":1195,"mtime":1607567504845,"results":"38","hashOfConfig":"28"},{"size":415,"mtime":1607567530120,"results":"39","hashOfConfig":"28"},{"size":430,"mtime":1607519645669,"results":"40","hashOfConfig":"28"},{"size":307,"mtime":1607486695401,"results":"41","hashOfConfig":"28"},{"size":836,"mtime":1607619380466,"results":"42","hashOfConfig":"28"},{"size":243,"mtime":1607487697616,"results":"43","hashOfConfig":"28"},{"size":371,"mtime":1607570004533,"results":"44","hashOfConfig":"28"},{"size":149,"mtime":1607495655795,"results":"45","hashOfConfig":"28"},{"size":955,"mtime":1607579523267,"results":"46","hashOfConfig":"28"},{"size":524,"mtime":1607617745279,"results":"47","hashOfConfig":"28"},{"size":5916,"mtime":1607619328505,"results":"48","hashOfConfig":"28"},{"size":527,"mtime":1607581596485,"results":"49","hashOfConfig":"28"},{"size":1526,"mtime":1607582332764,"results":"50","hashOfConfig":"28"},{"size":368,"mtime":1607582273800,"results":"51","hashOfConfig":"28"},{"size":434,"mtime":1607581475049,"results":"52","hashOfConfig":"28"},{"size":529,"mtime":1607616591169,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"2elvoi",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\index.js",[],["112","113"],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\App.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\reportWebVitals.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\reducers.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\actionType.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoGenerator.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\ToDoGeneratorContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\action.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\ToDoGroupContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoGroup.jsx",["114"],"import React, { Component } from 'react';\r\nimport ToDoItemContainer from '../containers/ToDoItemContainer';\r\nimport { getToDoList } from '../apis/todos';\r\nimport { List, Divider } from 'antd';\r\n\r\nclass ToDoGroup extends Component {\r\n\r\n    componentDidMount() {\r\n        getToDoList().then(response => {\r\n            this.props.initToDoList(response.data);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { toDoList, labelList } = this.props;\r\n        return (\r\n            // <div>\r\n            //     {\r\n            //         toDoList.map(value =>\r\n            //             <ToDoItemContainer key={value.id} todo={value} />\r\n            //         )\r\n            //     }\r\n            // </div>\r\n\r\n\r\n            <div className=\"toDoList\">\r\n                <Divider id=\"testing\">To Do List</Divider>\r\n                <List\r\n                    bordered\r\n                    dataSource={toDoList}\r\n                    renderItem={item => (\r\n                        <List.Item>\r\n                            { <ToDoItemContainer key={item.id} todo={item} />}\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoGroup;","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoItem.jsx",[],["115","116"],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\ToDoItemContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\ToDoList.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\DoneToDoListContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\DoneList.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\NotFound.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\apis\\todos.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\apis\\api.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\Navigation.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\LabelGeneratorContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\LabelGenerator.jsx",["117","118","119"],"import React, { Component } from 'react';\r\nimport { Tag, Input, Tooltip, Menu, Dropdown, Button, Space } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { updateToDo } from \"../apis/todos\"\r\nimport { getLabelList } from '../apis/labels';\r\nimport LabelItemContainer from '../containers/LabelItemContainer';\r\n\r\nclass LabelGenerator extends Component {\r\n\r\n    componentDidMount() {\r\n        getLabelList().then(response => {\r\n            this.props.initLabels(response.data);\r\n        });\r\n    }\r\n\r\n    addLabelToTodo = (newLabel) => {\r\n        const { todo } = this.props;\r\n        const labels = todo.labels;\r\n        updateToDo(todo.id, { ...todo, labels: [...labels, newLabel] }).then((response) => {\r\n            this.props.updateToDo(response.data);\r\n        })\r\n    }\r\n\r\n    removeLabelFromTodo = (removeLabel) => {\r\n        const { todo } = this.props;\r\n        const labels = todo.labels;\r\n        const filteredLabels = labels.filter(label => label !== removeLabel);\r\n        updateToDo(todo.id, { ...todo, labels: [...filteredLabels] }).then((response) => {\r\n            this.props.updateToDo(response.data);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.labelList)\r\n        const menuItems = this.props.labelList.map(label =>\r\n            <Menu.Item key={label.id} onClick={() => { this.addLabelToTodo(label)}} >{label.content}</Menu.Item>\r\n        );\r\n    \r\n        const menu = (\r\n            <Menu>\r\n                {menuItems}\r\n            </Menu>\r\n        );\r\n\r\n        const labelItems = this.props.todo.labels.map(label =>\r\n            <LabelItemContainer className=\"labelItem\" key={label.id} label={label} remove={this.removeLabelFromTodo}/>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {labelItems}\r\n                <Space direction=\"vertical\">\r\n                    <Space wrap>\r\n                        <Dropdown overlay={menu} placement=\"bottomCenter\">\r\n                            <Button className=\"addButton\" type=\"primary\" icon={<PlusOutlined />} />\r\n                        </Dropdown>\r\n                    </Space>\r\n                </Space>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // state = {\r\n    //     tags: this.props.todo.labels,\r\n    //     inputVisible: false,\r\n    //     inputValue: '',\r\n    // };\r\n\r\n    // handleClose = removedTag => {\r\n    //     const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n    //     this.setState({ tags });\r\n    //     updateToDo(this.props.todo.id, { ...this.props.todo, labels: tags }).then((response) => {\r\n    //         this.props.updateToDo(response.data)\r\n    //     })\r\n    // };\r\n\r\n    // showInput = () => {\r\n    //     this.setState({ inputVisible: true }, () => this.input.focus());\r\n    // };\r\n\r\n    // handleInputChange = e => {\r\n    //     this.setState({ inputValue: e.target.value });\r\n    // };\r\n\r\n    // handleInputConfirm = () => {\r\n    //     const { inputValue } = this.state;\r\n    //     let { tags } = this.state;\r\n    //     if (inputValue && tags.indexOf(inputValue) === -1) {\r\n    //         tags = [...tags, inputValue];\r\n    //     }\r\n    //     this.setState({\r\n    //         tags,\r\n    //         inputVisible: false,\r\n    //         inputValue: '',\r\n    //     });\r\n    //     updateToDo(this.props.todo.id, { ...this.props.todo, labels: tags }).then((response) => {\r\n    //         this.props.updateToDo(response.data);\r\n    //     })\r\n    // };\r\n\r\n    // saveInputRef = input => {\r\n    //     this.input = input;\r\n    // };\r\n\r\n    // saveEditInputRef = input => {\r\n    //     this.editInput = input;\r\n    // };\r\n\r\n    // colorArray = [\"Red \", \"Orange\", \"Violet\", \"Green\", \"Blue\", \"Purple\"];\r\n\r\n    // hashString = (str) => str\r\n    //     .split('')\r\n    //     .map((char) => char.charCodeAt(0))\r\n    //     .reduce((a, b) => a + b, 0);\r\n\r\n    // hashColor = (str) => this.colorArray[this.hashString(str) % this.colorArray.length];\r\n\r\n    // render() {\r\n    //     const { tags, inputVisible, inputValue } = this.state;\r\n    //     return (\r\n    //         <>\r\n    //             {tags.map((tag, index) => {\r\n\r\n    //                 const isLongTag = tag.length > 20;\r\n\r\n    //                 const tagElem = (\r\n    //                     <Tag\r\n    //                         className=\"edit-tag\"\r\n    //                         key={tag}\r\n    //                         closable\r\n    //                         color={this.hashColor(tag)}\r\n    //                         onClose={() => this.handleClose(tag)}\r\n    //                     >\r\n    //                         <span>\r\n    //                             {isLongTag ? `${tag.slice(0, 20)}...` : tag}\r\n    //                         </span>\r\n    //                     </Tag>\r\n    //                 );\r\n    //                 return isLongTag ? (\r\n    //                     <Tooltip title={tag} key={tag}>\r\n    //                         {tagElem}\r\n    //                     </Tooltip>\r\n    //                 ) : (\r\n    //                         tagElem\r\n    //                     );\r\n    //             })}\r\n    //             {inputVisible && (\r\n    //                 <Input\r\n    //                     ref={this.saveInputRef}\r\n    //                     type=\"text\"\r\n    //                     size=\"small\"\r\n    //                     className=\"tag-input\"\r\n    //                     value={inputValue}\r\n    //                     onChange={this.handleInputChange}\r\n    //                     onBlur={this.handleInputConfirm}\r\n    //                     onPressEnter={this.handleInputConfirm}\r\n    //                 />\r\n    //             )}\r\n    //             {!inputVisible && (\r\n    //                 <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n    //                     <PlusOutlined /> New Label\r\n    //                 </Tag>\r\n    //             )}\r\n    //         </>\r\n    //     );\r\n    // }\r\n}\r\n\r\nexport default LabelGenerator;","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\LabelManagerContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\LabelManager.jsx",["120"],"import { Button, Input } from 'antd';\r\nimport React, { Component } from 'react';\r\nimport { getLabelList } from '../apis/labels';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport LabelItemContainer from '../containers/LabelItemContainer';\r\nimport { addNewLabel } from \"../apis/labels\"\r\n\r\nclass LabelManager extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        getLabelList().then(response => {\r\n            this.props.initLabels(response.data);\r\n        });\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            content: event.target.value,\r\n        });\r\n    }\r\n\r\n    addLabel = () => {\r\n        addNewLabel({ content: this.state.content, color: '#a65959' }).then(response => {\r\n            this.props.addLabel(response.data);\r\n        });\r\n        this.setState({\r\n            content: '',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { labelList } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    labelList.map(value =>\r\n                        <LabelItemContainer key={value.id} label={value} />\r\n                    )\r\n                }\r\n                <Input placeholder=\"input a new todo here...\" value={this.state.content} allowClear onChange={this.onChange} />\r\n                <Button type=\"primary\" onClick={this.addLabel} >add</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LabelManager;","C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\apis\\labels.js",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\containers\\LabelItemContainer.jsx",[],"C:\\Users\\David\\Desktop\\web dev\\react-todo\\src\\components\\LabelItem.jsx",["121","122","123"],"import React, { Component } from 'react';\r\nimport { Tag } from 'antd';\r\nimport { deleteLabel, updateLabel } from \"../apis/labels\"\r\nimport { updateToDo } from \"../apis/todos\"\r\nclass LabelItem extends Component {\r\n\r\n    handleClose = () => {\r\n        this.props.remove(this.props.label);\r\n    }\r\n\r\n    render() {\r\n        const { content, color } = this.props.label;\r\n        return (\r\n            <div><Tag closable color={color}  onClose={this.handleClose}>{content}</Tag></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LabelItem;",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":15,"column":27,"nodeType":"130","messageId":"131","endLine":15,"endColumn":36},{"ruleId":"124","replacedBy":"132"},{"ruleId":"126","replacedBy":"133"},{"ruleId":"128","severity":1,"message":"134","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":13},{"ruleId":"128","severity":1,"message":"135","line":2,"column":15,"nodeType":"130","messageId":"131","endLine":2,"endColumn":20},{"ruleId":"128","severity":1,"message":"136","line":2,"column":22,"nodeType":"130","messageId":"131","endLine":2,"endColumn":29},{"ruleId":"128","severity":1,"message":"137","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":22},{"ruleId":"128","severity":1,"message":"138","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":21},{"ruleId":"128","severity":1,"message":"139","line":3,"column":23,"nodeType":"130","messageId":"131","endLine":3,"endColumn":34},{"ruleId":"128","severity":1,"message":"140","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":20},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'labelList' is assigned a value but never used.","Identifier","unusedVar",["141"],["142"],"'Tag' is defined but never used.","'Input' is defined but never used.","'Tooltip' is defined but never used.","'PlusOutlined' is defined but never used.","'deleteLabel' is defined but never used.","'updateLabel' is defined but never used.","'updateToDo' is defined but never used.","no-global-assign","no-unsafe-negation"]